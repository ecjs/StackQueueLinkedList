function Node(element) {  this.element = element; this.next = null;}function LList() {  this.head = new Node('head');  this.find = find;  this.insert = insert;  this.display = display;  this.findPrevious = findPrevious;  this.remove = remove;  this.advance = advance;}function remove(item) {  var prevNode = this.findPrevious(item); if (!(prevNode.next === null)) {    prevNode.next = prevNode.next.next;  }}function findPrevious(item) {  var currNode = this.head;  while (!(currNode.next === null) &&           (currNode.next.element != item)) {    currNode = currNode.next;}  return currNode;}function display() {  var currNode = this.head;  while (!(currNode.next === null)) {    console.log(currNode.next.element);    currNode = currNode.next;  }}function find(item) {  var currNode = this.head;  while (currNode.element != item) {    currNode = currNode.next;  }  return currNode;}function insert(newElement, item) {  var newNode = new Node(newElement);  var current = this.find(item);  newNode.next = current.next;  current.next = newNode;}function advance(node, places) {  var currNode = this.find(node);  var temp = currNode;  this.remove(node);  for (var i = 0; i < places; i++) {    currNode = currNode.next;  }  temp.next = currNode.next;  currNode.next = temp;}function back(node, places) {  var currNode = this.find(node);  var temp = currNode;  this.remove(node);  for (var i = 0; i < places; i++) {    currNode = currNode.next;  }  temp.next = currNode.next;  currNode.next = temp;}var cities = new LList();cities.insert('Seattle', 'head');cities.insert('Miami', 'Seattle');cities.insert('Bellingham', 'Miami');cities.insert('New York', 'Bellingham');cities.display();console.log('^^ Prior to changing');cities.advance('Miami', 2);cities.display();